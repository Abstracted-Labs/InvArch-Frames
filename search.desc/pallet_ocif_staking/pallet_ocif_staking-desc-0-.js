searchState.loadedDescShard("pallet_ocif_staking", 0, "OCIF Staking pallet\nStaking lock identifier.\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nProvides supporting types and traits for the staking …\nAutogenerated weights for <code>pallet_ocif_staking</code>\nThe balance type of this pallet.\nNumber of blocks per era.\nContains a variant per dispatchable extrinsic that this …\nConfiguration trait of this pallet.\nCore already registered.\nRewards claimed for core.\nStaking information about a core in a particular era.\nThe core information type, containing a core’s AccountId …\nThe core metadata type of this pallet.\nCore not found.\nNew core registered for staking.\nCore unregistered.\nCore ungregistration chunk was processed.\nSharded execution of the core unregistration process …\nCore is being unregistered.\nThe currency used in staking.\nThe current era index.\nAlias type for the era identifier type.\nThe <code>Error</code> enum of this pallet.\nThe <code>Event</code> enum of this pallet\nThe minimum amount required to keep an account open.\nGeneral information about an era.\nInfo about staker’s stakes on a particular core.\nHalt status changed.\nDenotes whether the pallet is halted (disabled).\nHalted.\nIncorrect era.\nAttempted to stake less than the minimum amount.\nGeneral information about the staker.\nDescription exceeds maximum length.\nMaximum length of a core’s description.\nMax number of unique <code>EraStake</code> values that can exist for a …\nImage URL exceeds maximum length.\nMaximum length of a core’s image URL.\nName exceeds maximum length.\nMaximum length of a core’s name.\nMaximum number of unique stakers per core.\nMaximum number of stakers reached.\nMax number of unlocking chunks per account Id &lt;-&gt; core Id …\nCore metadata changed.\nMinimum amount user must have staked on a core. User can …\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nAttempted to move stake to the same core.\nThe opaque token type for an imbalance. This is returned …\nBeginning of a new era.\nStores the block number of when the next era starts.\nNo halt change.\nNo permission.\nNo stake available for withdrawal.\nNot a staker.\nCore not registered.\nCore is not unregistered.\nNothing available for withdrawal.\nFee charghing interface.\nThe <code>Pallet</code> struct, the main type that implements traits …\nAccount Identifier from which the internal Pot is …\nDeposit amount that will be reserved as part of new core …\nSimple map where CoreId points to the respective core …\nAccumulator for block rewards during an era. It is reset …\nReward already claimed.\nReward ratio of the pot to be distributed between the core …\nThe overarching event type.\nStaker moved an amount of stake to another core.\nThreshold of staked tokens necessary for a core to become …\nAccount has staked funds to a core.\nStaker claimed rewards.\nMessage queue interface.\nStaking nothing.\nToo many era stake values.\nToo many unlocking chunks.\nNumber of eras that need to pass until unstaked value can …\nUnclaimed rewards available.\nUnexpected stake info for era.\nUnknown rewards for era.\nPlaceholder for the core being unregistered and its stake …\nPlaceholder for the core being unregistered and its …\nAccount has unstaked funds from a core.\nUnstaking nothing.\nWeight information for extrinsics in this pallet.\nWeight to fee conversion provider, from …\nAccount has withdrawn unbonded funds.\nReturns available staking balance for the potential staker.\nUsed to change the metadata of a core.\nSee <code>Pallet::change_core_metadata</code>.\nClaim core reward for the specified era.\nSee <code>Pallet::core_claim_rewards</code>.\nAn auto-generated getter for <code>RegisteredCore</code>.\nAn auto-generated getter for <code>CoreEraStake</code>.\nCalculate reward split between core and stakers.\nAn auto-generated getter for <code>UnregisteredCoreStakeInfo</code>.\nAn auto-generated getter for <code>UnregisteredCoreStakers</code>.\nAn auto-generated getter for <code>CurrentEra</code>.\nAuto-generated docs-only module listing all defined …\nEnsure the pallet is not halted.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nAn auto-generated getter for <code>GeneralEraInfo</code>.\nHalt or unhalt the pallet.\nSee <code>Pallet::halt_unhalt_pallet</code>.\nSets the halt state of the pallet.\nInternal function responsible for validating a stake and …\nInternal function responsible for validating an unstake …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn auto-generated getter for <code>Halted</code>.\nAn auto-generated getter for <code>Ledger</code>.\nMove stake from one core to another.\nSee <code>Pallet::move_stake</code>.\nCreate a call with the variant <code>change_core_metadata</code>.\nCreate a call with the variant <code>core_claim_rewards</code>.\nCreate a call with the variant <code>halt_unhalt_pallet</code>.\nCreate a call with the variant <code>move_stake</code>.\nCreate a call with the variant <code>register_core</code>.\nCreate a call with the variant <code>stake</code>.\nCreate a call with the variant <code>staker_claim_rewards</code>.\nCreate a call with the variant <code>unregister_core</code>.\nCreate a call with the variant <code>unstake</code>.\nCreate a call with the variant <code>withdraw_unstaked</code>.\nAn auto-generated getter for <code>NextEraStartingBlock</code>.\nSharded execution of the core unregistration process.\nUsed to register core for staking.\nSee <code>Pallet::register_core</code>.\nAn auto-generated getter for <code>RewardAccumulator</code>.\nThe block rewards are accumulated on the pallet’s …\nAdds <code>stakers</code> and <code>cores</code> rewards to the reward pool.\nUsed to copy all <code>CoreStakeInfo</code> from the ending era over to …\nLock up and stake balance of the origin account.\nSee <code>Pallet::stake</code>.\nClaim the staker’s rewards.\nSee <code>Pallet::staker_claim_rewards</code>.\nAn auto-generated getter for <code>GeneralStakerInfo</code>.\nAuto-generated docs-only module listing all (public and …\nReturns total value locked by staking.\nUnregister existing core for staking, making it ineligible …\nSee <code>Pallet::unregister_core</code>.\nStart unbonding process and unstake balance from the core.\nSee <code>Pallet::unstake</code>.\nUpdate the ledger for a staker. This will also update the …\nUpdates staker info for a core.\nWithdraw all funds that have completed the unbonding …\nSee <code>Pallet::withdraw_unstaked</code>.\nUsed to change the metadata of a core.\nClaim core reward for the specified era.\nHalt or unhalt the pallet.\nMove stake from one core to another.\nUsed to register core for staking.\nLock up and stake balance of the origin account.\nClaim the staker’s rewards.\nUnregister existing core for staking, making it ineligible …\nStart unbonding process and unstake balance from the core.\nWithdraw all funds that have completed the unbonding …\nStaking information about a core in a particular era.\nThe current era index.\nGeneral information about an era.\nInfo about staker’s stakes on a particular core.\nDenotes whether the pallet is halted (disabled).\nGeneral information about the staker.\nStores the block number of when the next era starts.\nSimple map where CoreId points to the respective core …\nAccumulator for block rewards during an era. It is reset …\nPlaceholder for the core being unregistered and its stake …\nPlaceholder for the core being unregistered and its …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInformation about an account’s locked balance and …\nThe balance type of this pallet.\nInformation about a core entity, including its account ID …\nMetadata for a core entity in the system.\nInformation about a core’s stake, including the total …\nCustom Convert a sibling <code>ParaId</code> to an …\nInformation about a specific era, including rewards, …\nInformation about the stake for a specific era.\nInformation about rewards, including the balance for …\nInformation about a staker’s stakes across different …\nInformation about unbonding chunks of balance.\nA chunk of balance that is unlocking until a specific era.\nAdds the given chunk to the unbonding info.\nAdds the given amount to the chunk’s amount.\nClaims the stake for the current era, mutates StakerInfo …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the latest staked balance.\nreturns the chucks before and after a given era.\nStakes the given value in the current era, mutates …\nReturns the total amount of the unlocking chunks.\nUnstakes the given value in the current era, mutates …\nWeights for <code>pallet_ocif_staking</code> using the Substrate node …\nWeight functions needed for <code>pallet_ocif_staking</code>.\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nStorage: <code>OcifStaking::Halted</code> (r:1 w:1) Proof: …\nCalls <code>U::from(self)</code>.\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …\nStorage: <code>OcifStaking::Halted</code> (r:1 w:0) Proof: …")