searchState.loadedDescShard("pallet_inv4", 0, "Pallet INV4\nStaticLookup implementor using MultiAddress::Index for …\nCore Account Derivation.\nDispatches calls internally, charging fees to the multisig …\nMultisigFeeHandler trait.\nCore creation and internal management.\nCustom account lookup implementation.\nMultisig Operations.\nCustom Multisig Origin (<code>INV4Origin</code>).\nThe <code>pallet</code> module in each FRAME pallet hosts the most …\nVoting Mechanism.\nAutogenerated weights for <code>pallet_inv4</code>\nTrait providing the XCM location and the derived account …\nSpecifies a core’s location.\nDerives the core’s AccountId.\nDispatch a call executing pre/post dispatch for proper fee …\nRepresents the asset to be used by the multisig for paying …\nRepresents a potential negative asset balance incurred …\nFee handler trait.\nType returned by <code>pre_dispatch</code> - implementation dependent.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCharges the fee for creating the core (multisig).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCharges the call dispatching fee from the multisig …\nChecks if the fee can be paid using the selected asset.\nStaticLookup implementor using MultiAddress::Index for …\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nMaximum size of call we store is 50kb.\nDetails of a multisig operation.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nOrigin representing a core by its id.\nInternal origin for identifying the multisig CoreId.\nEnsures the passed origin is a multisig, returning …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProvider of assets functionality for the voting tokens\nA core’s voting token was burned\nDispatch functions\nMultisig fee payment failed, probably due to lack of funds …\nFailed to extract metadata from a call\nConfiguration trait of this pallet.\nMapping of account id -&gt; core id.\nA core was created\nFee for creating a core in the native token\nInteger id type for the core id\nStores a list of members for each Core. This storage …\nCore not found\nBase voting token balance to give callers when creating a …\nCore info storage.\nCurrency type\nErrors for INV4 pallet\nThe <code>Event</code> enum of this pallet\nFailed to decode stored multisig call\nImplementation of the fee handler for both core creation …\nIncomplete vote cleanup\nByte to fee conversion provider, from …\nCall is too long\nMaximum size of a multisig proposal call\nThe maximum numbers of caller accounts on a single …\nMaximum amount of callers exceeded\nThe maximum length of the core metadata and the metadata …\nMaximum metadata length exceeded\nA core’s voting token was minted\nType alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.\nDetails of a multisig call.\nMultisig proposal already exists and is being voted on\nMultisig call not found\nA multisig proposal was cancelled\nA multisig proposal passed and it’s call was executed\nA vote was added to an existing multisig proposal\nA multisig proposal has started, it needs more votes to …\nA vote was removed from an existing multisig proposal\nNext available Core ID.\nNo available Core ID\nThe caller has no permissions in the core\nCannot withdraw a vote on a multisig transaction you have …\nThe custom core origin.\nThe <code>Pallet</code> struct, the main type that implements traits …\nParaId of the parachain, to be used for deriving the core …\nA core had parameters changed\nRelay token asset id in the runtime\nFee for creating a core in the relay token\nThe overarching call type\nRuntime event type\nThe outer <code>Origin</code> type.\nThe current storage version.\nProvider of balance tokens in the runtime\nWeight info for dispatchable calls\nIPS parentage\nCancel an existing multisig proposal (called by a core …\nSee <code>Pallet::cancel_multisig_proposal</code>.\nAn auto-generated getter for <code>CoreByAccount</code>.\nCore location is defined as a plurality within the …\nAn auto-generated getter for <code>CoreMembers</code>.\nAn auto-generated getter for <code>CoreStorage</code>.\nCreate a new core\nSee <code>Pallet::create_core</code>.\nHashedDescription of the core location from the …\nAuto-generated docs-only module listing all defined …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nInner function for the cancel_multisig_proposal call.\nInner function for the create_core call.\nInner function for the operate_multisig call.\nInner function for the set_parameters call.\nInner function for the token_burn call.\nInner function for the token_mint call.\nInner function for the vote_multisig call.\nInner function for the withdraw_token_multisig call.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the voting asset is frozen.\nMatches <code>MultiAddress</code> to allow for a <code>MultiAddress::Index</code> …\nQueries <code>CoreStorage</code> to retrieve the AccountId of a core.\nIPS metadata\nAye vote percentage required to execute a multisig call.\nReturns the minimum support and required approval …\nAn auto-generated getter for <code>Multisig</code>.\nCreate a call with the variant <code>cancel_multisig_proposal</code>.\nCreate a call with the variant <code>create_core</code>.\nCreate a call with the variant <code>operate_multisig</code>.\nCreate a call with the variant <code>set_parameters</code>.\nCreate a call with the variant <code>token_burn</code>.\nCreate a call with the variant <code>token_mint</code>.\nCreate a call with the variant <code>vote_multisig</code>.\nCreate a call with the variant <code>withdraw_vote_multisig</code>.\nAn auto-generated getter for <code>NextCoreId</code>.\nCreate a new multisig proposal, auto-executing if caller …\nSee <code>Pallet::operate_multisig</code>.\nChange core parameters incl. voting thresholds and token …\nSee <code>Pallet::set_parameters</code>.\nAuto-generated docs-only module listing all (public and …\nBurn the core’s voting token from a target (called by a …\nSee <code>Pallet::token_burn</code>.\nMint the core’s voting token to a target (called by a …\nSee <code>Pallet::token_mint</code>.\nVote on an existing multisig proposal, auto-executing if …\nSee <code>Pallet::vote_multisig</code>.\nRemove caller’s vote from an existing multisig proposal\nSee <code>Pallet::withdraw_vote_multisig</code>.\nCancel an existing multisig proposal (called by a core …\nCreate a new core\nCreate a new multisig proposal, auto-executing if caller …\nChange core parameters incl. voting thresholds and token …\nBurn the core’s voting token from a target (called by a …\nMint the core’s voting token to a target (called by a …\nVote on an existing multisig proposal, auto-executing if …\nRemove caller’s vote from an existing multisig proposal\nMapping of account id -&gt; core id.\nStores a list of members for each Core. This storage …\nCore info storage.\nDetails of a multisig call.\nNext available Core ID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAggregated votes for an ongoing poll by members of a core.\nRepresents a proposal vote within a multisig context.\nType alias for <code>Vote</code> with <code>BalanceOf</code>.\n<code>Some</code> if the referendum <code>index</code> can be voted on, along with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a mutable reference to the inner from the outer.\nAllows for building a <code>Tally</code> manually.\nGet a reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if a vote is valid and add the member’s total …\nWeights for <code>pallet_inv4</code> using the Substrate node and …\nWeight functions needed for <code>pallet_inv4</code>.\nStorage: <code>INV4::Multisig</code> (r:0 w:1) Proof: <code>INV4::Multisig</code> (…\nStorage: <code>INV4::NextCoreId</code> (r:1 w:1) Proof: <code>INV4::NextCoreId</code>…\nReturns the argument unchanged.\nGet a mutable reference to the inner from the outer.\nGet a reference to the inner from the outer.\nCalls <code>U::from(self)</code>.\nStorage: <code>CoreAssets::Accounts</code> (r:1 w:0) Proof: …\nStorage: <code>INV4::CoreStorage</code> (r:1 w:1) Proof: …\nStorage: <code>CoreAssets::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>CoreAssets::Accounts</code> (r:1 w:1) Proof: …\nStorage: <code>INV4::Multisig</code> (r:1 w:1) Proof: <code>INV4::Multisig</code> (…\nStorage: <code>INV4::Multisig</code> (r:1 w:1) Proof: <code>INV4::Multisig</code> (…")